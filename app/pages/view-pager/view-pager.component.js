/**
 * Created by admin on 2017/6/12.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var stack_layout_1 = require("tns-core-modules/ui/layouts/stack-layout");
var image_1 = require("tns-core-modules/ui/image");
var Observable_1 = require("rxjs/Observable");
var platform_1 = require("platform");
var enums_1 = require("tns-core-modules/ui/enums");
var ViewPagerComponent = (function () {
    function ViewPagerComponent() {
        this.onPagerChange = new core_1.EventEmitter();
        this.index = 0;
        this.height = 0;
    }
    ViewPagerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.addData(this.images);
        this.subscribe = Observable_1.Observable.interval(2500).subscribe(function () {
            _this.flip(_this.index + 1);
        });
    };
    ViewPagerComponent.prototype.addData = function (images) {
        var _this = this;
        this.height = platform_1.screen.mainScreen.widthDIPs * 520 / 1080;
        this.viewpager = new stack_layout_1.StackLayout();
        this.viewpager.set("width", platform_1.screen.mainScreen.widthDIPs * this.images.length);
        this.viewpager.set("height", this.height);
        this.viewpager.set("orientation", "horizontal");
        this.barContainer = new stack_layout_1.StackLayout();
        this.barContainer.set("width", 20 * images.length);
        this.barContainer.set("height", 20);
        this.barContainer.set("orientation", "horizontal");
        this.barContainer.set("left", (platform_1.screen.mainScreen.widthDIPs - 20 * images.length) / 2);
        this.barContainer.set("top", this.height - 30);
        images.forEach(function (url, i) {
            var image = new image_1.Image();
            image.set("src", url);
            image.set("width", platform_1.screen.mainScreen.widthDIPs);
            image.set("height", _this.height);
            _this.viewpager.addChild(image);
            var lab = new image_1.Image();
            lab.set("width", 10);
            lab.set("height", 10);
            lab.set("borderRadius", 10);
            lab.set("margin", 5);
            if (i === 0) {
                lab.set("backgroundColor", "#ffffff");
            }
            else {
                lab.set("backgroundColor", "#44000000");
            }
            _this.barContainer.addChild(lab);
        });
        var absoluteLayout = this.container.nativeElement;
        absoluteLayout.addChild(this.viewpager);
        absoluteLayout.addChild(this.barContainer);
    };
    ViewPagerComponent.prototype.ngOnDestroy = function () {
        this.subscribe.unsubscribe();
    };
    ViewPagerComponent.prototype.flip = function (index) {
        var _this = this;
        if (this.index === this.images.length - 1) {
            index = 0;
        }
        this.viewpager.animate({
            translate: { x: -platform_1.screen.mainScreen.widthDIPs * index, y: 0 },
            duration: 300,
            curve: enums_1.AnimationCurve.linear,
        }).then(function () {
            if (_this.index === _this.images.length - 1) {
                _this.index = 0;
            }
            else {
                _this.index++;
            }
            for (var i = 0; i < _this.barContainer.getChildrenCount(); i++) {
                var lab = _this.barContainer.getChildAt(i);
                if (_this.index === i) {
                    lab.set("backgroundColor", "#ffffff");
                }
                else {
                    lab.set("backgroundColor", "#55000000");
                }
            }
        });
    };
    ViewPagerComponent.prototype.upFlip = function (index) {
        var _this = this;
        if (index === -1) {
            index = this.images.length - 1;
        }
        this.viewpager.animate({
            translate: { x: -platform_1.screen.mainScreen.widthDIPs * index, y: 0 },
            duration: 300,
            curve: enums_1.AnimationCurve.linear,
        }).then(function () {
            if (_this.index === 0) {
                _this.index = _this.images.length - 1;
            }
            else {
                _this.index--;
            }
            for (var i = 0; i < _this.barContainer.getChildrenCount(); i++) {
                var lab = _this.barContainer.getChildAt(i);
                if (_this.index === i) {
                    lab.set("backgroundColor", "#ffffff");
                }
                else {
                    lab.set("backgroundColor", "#55000000");
                }
            }
        });
    };
    ViewPagerComponent.prototype.onTap = function () {
        this.onPagerChange.emit(this.index);
    };
    ViewPagerComponent.prototype.onPan = function (args) {
        var _this = this;
        // this.viewpager.set("translateX",-screen.mainScreen.widthDIPs * (this.index + 1)+args.deltaX)
        if (args.state === 1) {
            this.subscribe.unsubscribe();
        }
        else if (args.state === 3) {
            if (args.deltaX > 20) {
                this.upFlip(this.index - 1);
            }
            else if (args.deltaX < -20) {
                this.flip(this.index + 1);
            }
            this.subscribe = Observable_1.Observable.interval(2500).subscribe(function (time) {
                _this.flip(_this.index + 1);
            });
        }
    };
    return ViewPagerComponent;
}());
__decorate([
    core_1.ViewChild("container"),
    __metadata("design:type", core_1.ElementRef)
], ViewPagerComponent.prototype, "container", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], ViewPagerComponent.prototype, "images", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], ViewPagerComponent.prototype, "onPagerChange", void 0);
ViewPagerComponent = __decorate([
    core_1.Component({
        selector: "view-pager",
        moduleId: module.id,
        templateUrl: "./view-pager.component.html",
        styleUrls: ["./view-pager.common.css"],
    })
], ViewPagerComponent);
exports.ViewPagerComponent = ViewPagerComponent;
//# sourceMappingURL=data:application/json;base64,